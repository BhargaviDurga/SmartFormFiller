{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jada Bhargavi Durga\\\\Desktop\\\\Smart_form_filler\\\\frontend\\\\src\\\\pages\\\\UploadForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport FileUpload from \"../components/FileUpload\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport PDFPreview from \"../components/PDFPreview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadForm() {\n  _s();\n  const [pdfFile, setPdfFile] = useState(null);\n  const [filledPdfUrl, setFilledPdfUrl] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handlePdfUpload = async () => {\n    if (!pdfFile) return;\n    setLoading(true);\n    const formData = new FormData();\n    formData.append('file', pdfFile);\n    formData.append('extracted_data', JSON.stringify({/* your extracted data here */}));\n    try {\n      const response = await axios.post('http://localhost:5000/fill-form', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        responseType: 'blob' // Ensure the response is treated as a blob\n      });\n      const url = URL.createObjectURL(new Blob([response.data]));\n      setFilledPdfUrl(url);\n    } catch (error) {\n      console.error(\"Error uploading PDF:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n      label: \"Upload Form (PDF)\",\n      onFileSelect: setPdfFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePdfUpload,\n      className: \"btn btn-primary\",\n      children: \"Upload & Fill Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n      message: \"Filling form...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 25\n    }, this), filledPdfUrl && /*#__PURE__*/_jsxDEV(PDFPreview, {\n      pdfUrl: filledPdfUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n_s(UploadForm, \"GnhPa8J8Q0cSpVxcUYbqGWWIub4=\");\n_c = UploadForm;\nvar _c;\n$RefreshReg$(_c, \"UploadForm\");","map":{"version":3,"names":["useState","axios","FileUpload","LoadingSpinner","PDFPreview","jsxDEV","_jsxDEV","UploadForm","_s","pdfFile","setPdfFile","filledPdfUrl","setFilledPdfUrl","loading","setLoading","handlePdfUpload","formData","FormData","append","JSON","stringify","response","post","headers","responseType","url","URL","createObjectURL","Blob","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","label","onFileSelect","onClick","message","pdfUrl","_c","$RefreshReg$"],"sources":["C:/Users/Jada Bhargavi Durga/Desktop/Smart_form_filler/frontend/src/pages/UploadForm.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport FileUpload from \"../components/FileUpload\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport PDFPreview from \"../components/PDFPreview\";\r\n\r\nexport default function UploadForm() {\r\n    const [pdfFile, setPdfFile] = useState(null);\r\n    const [filledPdfUrl, setFilledPdfUrl] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handlePdfUpload = async () => {\r\n        if (!pdfFile) return;\r\n        setLoading(true);\r\n        const formData = new FormData();\r\n        formData.append('file', pdfFile);\r\n        formData.append('extracted_data', JSON.stringify({ /* your extracted data here */ }));\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/fill-form', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                },\r\n                responseType: 'blob', // Ensure the response is treated as a blob\r\n            });\r\n            const url = URL.createObjectURL(new Blob([response.data]));\r\n            setFilledPdfUrl(url);\r\n        } catch (error) {\r\n            console.error(\"Error uploading PDF:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mt-4\">\r\n            <h2>Upload Form</h2>\r\n            <FileUpload label=\"Upload Form (PDF)\" onFileSelect={setPdfFile} />\r\n            <button onClick={handlePdfUpload} className=\"btn btn-primary\">Upload & Fill Form</button>\r\n\r\n            {loading && <LoadingSpinner message=\"Filling form...\" />}\r\n\r\n            {filledPdfUrl && <PDFPreview pdfUrl={filledPdfUrl} />}\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMe,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACN,OAAO,EAAE;IACdK,UAAU,CAAC,IAAI,CAAC;IAChB,MAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAET,OAAO,CAAC;IAChCO,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAAC,CAAE,+BAAgC,CAAC,CAAC;IAErF,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAAC,iCAAiC,EAAEN,QAAQ,EAAE;QAC3EO,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,YAAY,EAAE,MAAM,CAAE;MAC1B,CAAC,CAAC;MACF,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC;MAC1DjB,eAAe,CAACa,GAAG,CAAC;IACxB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD,CAAC,SAAS;MACNhB,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,oBACIR,OAAA;IAAK0B,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3B3B,OAAA;MAAA2B,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB/B,OAAA,CAACJ,UAAU;MAACoC,KAAK,EAAC,mBAAmB;MAACC,YAAY,EAAE7B;IAAW;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClE/B,OAAA;MAAQkC,OAAO,EAAEzB,eAAgB;MAACiB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAExFxB,OAAO,iBAAIP,OAAA,CAACH,cAAc;MAACsC,OAAO,EAAC;IAAiB;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAEvD1B,YAAY,iBAAIL,OAAA,CAACF,UAAU;MAACsC,MAAM,EAAE/B;IAAa;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEd;AAAC7B,EAAA,CAvCuBD,UAAU;AAAAoC,EAAA,GAAVpC,UAAU;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}